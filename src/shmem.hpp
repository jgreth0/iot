
#ifndef _SHMEM_H_
#define _SHMEM_H_

#include "signal_handler.hpp"

////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
class shmem : public module {
private:
    ////////////////////////////////////////////////////////////////////////////
    //
    ////////////////////////////////////////////////////////////////////////////
    void* shared_mem;
    void* result_value;
    time_point last_change;
    void* target_value;
    signal_handler* sigio_handler = nullptr;
    bool target_valid = false;
    int size;
    int sock;
    std::mutex mtx;
protected:
    ////////////////////////////////////////////////////////////////////////////
    //
    ////////////////////////////////////////////////////////////////////////////
    virtual void sync(bool last = false);
public:
    ////////////////////////////////////////////////////////////////////////////
    //
    ////////////////////////////////////////////////////////////////////////////
    time_point get_result(void* value = nullptr);
    void set_target(void* value);

    ////////////////////////////////////////////////////////////////////////////
    //
    ////////////////////////////////////////////////////////////////////////////
    void enable();

    ////////////////////////////////////////////////////////////////////////////
    //
    ////////////////////////////////////////////////////////////////////////////
    void disable();

    ////////////////////////////////////////////////////////////////////////////
    //
    ////////////////////////////////////////////////////////////////////////////
    shmem(const char* device, int size, signal_handler* sigio_handler = nullptr);
    ~shmem();
};

#endif
