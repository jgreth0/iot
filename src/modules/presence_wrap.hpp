
#ifndef _PRESENCE_WRAP_H_
#define _PRESENCE_WRAP_H_

#include "presence.hpp"

////////////////////////////////////////////////////////////////////////////////
// This module simply ORs the present() results from an array of other presence
// modules. The only source of complexity is in correctly computing
// get_last_time_not_present().
////////////////////////////////////////////////////////////////////////////////
class presence_wrap : public presence {
private:
    ////////////////////////////////////////////////////////////////////////////
    //
    ////////////////////////////////////////////////////////////////////////////
    time_point last_time_not_present;
    std::mutex mtx;
    bool presence_reported = false, last_reported = false;

    presence* modules;
    int module_count = 0;

protected:
    ////////////////////////////////////////////////////////////////////////////
    //
    ////////////////////////////////////////////////////////////////////////////
    void sync(bool last = false);

public:
    ////////////////////////////////////////////////////////////////////////////
    //
    ////////////////////////////////////////////////////////////////////////////
    bool present();

    ////////////////////////////////////////////////////////////////////////////
    // When was the device last detected
    // If the device was detected within the time limit, returns now_floor()
    ////////////////////////////////////////////////////////////////////////////
    time_point get_last_time_present();

    ////////////////////////////////////////////////////////////////////////////
    // When was the device last undetected for at least time_limit seconds?
    // If the device was not detected within the time limit, returns now_floor()
    ////////////////////////////////////////////////////////////////////////////
    time_point get_last_time_not_present();

    presence_wrap(char* name, presence* modules, int count);

    ////////////////////////////////////////////////////////////////////////////
    //
    ////////////////////////////////////////////////////////////////////////////
    void enable();

    ////////////////////////////////////////////////////////////////////////////
    //
    ////////////////////////////////////////////////////////////////////////////
    void disable();
};

#endif
